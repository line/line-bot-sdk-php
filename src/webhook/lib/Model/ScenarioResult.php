<?php
/**
 * Copyright 2024 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/**
 * ScenarioResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  LINE\Webhook
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LINE\Webhook\Model;

use \ArrayAccess;
use \LINE\Webhook\ObjectSerializer;

/**
 * ScenarioResult Class Doc Comment
 *
 * @category Class
 * @package  LINE\Webhook
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScenarioResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScenarioResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scenarioId' => 'string',
        'revision' => 'int',
        'startTime' => 'int',
        'endTime' => 'int',
        'resultCode' => 'string',
        'actionResults' => '\LINE\Webhook\Model\ActionResult[]',
        'bleNotificationPayload' => 'string',
        'errorReason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'scenarioId' => null,
        'revision' => null,
        'startTime' => 'int64',
        'endTime' => 'int64',
        'resultCode' => null,
        'actionResults' => null,
        'bleNotificationPayload' => null,
        'errorReason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'scenarioId' => false,
		'revision' => false,
		'startTime' => false,
		'endTime' => false,
		'resultCode' => false,
		'actionResults' => false,
		'bleNotificationPayload' => false,
		'errorReason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scenarioId' => 'scenarioId',
        'revision' => 'revision',
        'startTime' => 'startTime',
        'endTime' => 'endTime',
        'resultCode' => 'resultCode',
        'actionResults' => 'actionResults',
        'bleNotificationPayload' => 'bleNotificationPayload',
        'errorReason' => 'errorReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scenarioId' => 'setScenarioId',
        'revision' => 'setRevision',
        'startTime' => 'setStartTime',
        'endTime' => 'setEndTime',
        'resultCode' => 'setResultCode',
        'actionResults' => 'setActionResults',
        'bleNotificationPayload' => 'setBleNotificationPayload',
        'errorReason' => 'setErrorReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scenarioId' => 'getScenarioId',
        'revision' => 'getRevision',
        'startTime' => 'getStartTime',
        'endTime' => 'getEndTime',
        'resultCode' => 'getResultCode',
        'actionResults' => 'getActionResults',
        'bleNotificationPayload' => 'getBleNotificationPayload',
        'errorReason' => 'getErrorReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('scenarioId', $data ?? [], null);
        $this->setIfExists('revision', $data ?? [], null);
        $this->setIfExists('startTime', $data ?? [], null);
        $this->setIfExists('endTime', $data ?? [], null);
        $this->setIfExists('resultCode', $data ?? [], null);
        $this->setIfExists('actionResults', $data ?? [], null);
        $this->setIfExists('bleNotificationPayload', $data ?? [], null);
        $this->setIfExists('errorReason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['startTime'] === null) {
            $invalidProperties[] = "'startTime' can't be null";
        }
        if ($this->container['endTime'] === null) {
            $invalidProperties[] = "'endTime' can't be null";
        }
        if ($this->container['resultCode'] === null) {
            $invalidProperties[] = "'resultCode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scenarioId
     *
     * @return string|null
     */
    public function getScenarioId()
    {
        return $this->container['scenarioId'];
    }

    /**
     * Sets scenarioId
     *
     * @param string|null $scenarioId Scenario ID executed
     *
     * @return self
     */
    public function setScenarioId($scenarioId)
    {
        if (is_null($scenarioId)) {
            throw new \InvalidArgumentException('non-nullable scenarioId cannot be null');
        }
        $this->container['scenarioId'] = $scenarioId;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int|null
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int|null $revision Revision number of the scenario set containing the executed scenario
     *
     * @return self
     */
    public function setRevision($revision)
    {
        if (is_null($revision)) {
            throw new \InvalidArgumentException('non-nullable revision cannot be null');
        }
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param int $startTime Timestamp for when execution of scenario action started (milliseconds, LINE app time)
     *
     * @return self
     */
    public function setStartTime($startTime)
    {
        if (is_null($startTime)) {
            throw new \InvalidArgumentException('non-nullable startTime cannot be null');
        }
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets endTime
     *
     * @return int
     */
    public function getEndTime()
    {
        return $this->container['endTime'];
    }

    /**
     * Sets endTime
     *
     * @param int $endTime Timestamp for when execution of scenario was completed (milliseconds, LINE app time)
     *
     * @return self
     */
    public function setEndTime($endTime)
    {
        if (is_null($endTime)) {
            throw new \InvalidArgumentException('non-nullable endTime cannot be null');
        }
        $this->container['endTime'] = $endTime;

        return $this;
    }

    /**
     * Gets resultCode
     *
     * @return string
     */
    public function getResultCode()
    {
        return $this->container['resultCode'];
    }

    /**
     * Sets resultCode
     *
     * @param string $resultCode Scenario execution completion status
     *
     * @return self
     */
    public function setResultCode($resultCode)
    {
        if (is_null($resultCode)) {
            throw new \InvalidArgumentException('non-nullable resultCode cannot be null');
        }
        $this->container['resultCode'] = $resultCode;

        return $this;
    }

    /**
     * Gets actionResults
     *
     * @return \LINE\Webhook\Model\ActionResult[]|null
     */
    public function getActionResults()
    {
        return $this->container['actionResults'];
    }

    /**
     * Sets actionResults
     *
     * @param \LINE\Webhook\Model\ActionResult[]|null $actionResults Execution result of individual operations specified in action. Only included when things.result.resultCode is success.
     *
     * @return self
     */
    public function setActionResults($actionResults)
    {
        if (is_null($actionResults)) {
            throw new \InvalidArgumentException('non-nullable actionResults cannot be null');
        }
        $this->container['actionResults'] = $actionResults;

        return $this;
    }

    /**
     * Gets bleNotificationPayload
     *
     * @return string|null
     */
    public function getBleNotificationPayload()
    {
        return $this->container['bleNotificationPayload'];
    }

    /**
     * Sets bleNotificationPayload
     *
     * @param string|null $bleNotificationPayload Data contained in notification.
     *
     * @return self
     */
    public function setBleNotificationPayload($bleNotificationPayload)
    {
        if (is_null($bleNotificationPayload)) {
            throw new \InvalidArgumentException('non-nullable bleNotificationPayload cannot be null');
        }
        $this->container['bleNotificationPayload'] = $bleNotificationPayload;

        return $this;
    }

    /**
     * Gets errorReason
     *
     * @return string|null
     */
    public function getErrorReason()
    {
        return $this->container['errorReason'];
    }

    /**
     * Sets errorReason
     *
     * @param string|null $errorReason Error reason.
     *
     * @return self
     */
    public function setErrorReason($errorReason)
    {
        if (is_null($errorReason)) {
            throw new \InvalidArgumentException('non-nullable errorReason cannot be null');
        }
        $this->container['errorReason'] = $errorReason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


