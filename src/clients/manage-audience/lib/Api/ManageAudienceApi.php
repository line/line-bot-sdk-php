<?php
/**
 * Copyright 2024 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/**
 * ManageAudienceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  LINE\Clients\ManageAudience
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LINE\Clients\ManageAudience\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LINE\Clients\ManageAudience\ApiException;
use LINE\Clients\ManageAudience\Configuration;
use LINE\Clients\ManageAudience\HeaderSelector;
use LINE\Clients\ManageAudience\ObjectSerializer;

/**
 * ManageAudienceApi Class Doc Comment
 *
 * @category Class
 * @package  LINE\Clients\ManageAudience
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ManageAudienceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'activateAudienceGroup' => [
            'application/json',
        ],
        'addAudienceToAudienceGroup' => [
            'application/json',
        ],
        'createAudienceGroup' => [
            'application/json',
        ],
        'createClickBasedAudienceGroup' => [
            'application/json',
        ],
        'createImpBasedAudienceGroup' => [
            'application/json',
        ],
        'deleteAudienceGroup' => [
            'application/json',
        ],
        'getAudienceData' => [
            'application/json',
        ],
        'getAudienceGroupAuthorityLevel' => [
            'application/json',
        ],
        'getAudienceGroups' => [
            'application/json',
        ],
        'updateAudienceGroupAuthorityLevel' => [
            'application/json',
        ],
        'updateAudienceGroupDescription' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation activateAudienceGroup
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function activateAudienceGroup($audienceGroupId, string $contentType = self::contentTypes['activateAudienceGroup'][0])
    {
        $this->activateAudienceGroupWithHttpInfo($audienceGroupId, $contentType);
    }

    /**
     * Operation activateAudienceGroupWithHttpInfo
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function activateAudienceGroupWithHttpInfo($audienceGroupId, string $contentType = self::contentTypes['activateAudienceGroup'][0])
    {
        $request = $this->activateAudienceGroupRequest($audienceGroupId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation activateAudienceGroupAsync
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateAudienceGroupAsync($audienceGroupId, string $contentType = self::contentTypes['activateAudienceGroup'][0])
    {
        return $this->activateAudienceGroupAsyncWithHttpInfo($audienceGroupId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation activateAudienceGroupAsyncWithHttpInfo
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateAudienceGroupAsyncWithHttpInfo($audienceGroupId, string $contentType = self::contentTypes['activateAudienceGroup'][0])
    {
        $returnType = '';
        $request = $this->activateAudienceGroupRequest($audienceGroupId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'activateAudienceGroup'
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function activateAudienceGroupRequest($audienceGroupId, string $contentType = self::contentTypes['activateAudienceGroup'][0])
    {

        // verify the required parameter 'audienceGroupId' is set
        if ($audienceGroupId === null || (is_array($audienceGroupId) && count($audienceGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audienceGroupId when calling activateAudienceGroup'
            );
        }


        $resourcePath = '/v2/bot/audienceGroup/{audienceGroupId}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($audienceGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'audienceGroupId' . '}',
                ObjectSerializer::toPathValue($audienceGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addAudienceToAudienceGroup
     *
     * @param  \LINE\Clients\ManageAudience\Model\AddAudienceToAudienceGroupRequest $addAudienceToAudienceGroupRequest addAudienceToAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudienceToAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addAudienceToAudienceGroup($addAudienceToAudienceGroupRequest, string $contentType = self::contentTypes['addAudienceToAudienceGroup'][0])
    {
        $this->addAudienceToAudienceGroupWithHttpInfo($addAudienceToAudienceGroupRequest, $contentType);
    }

    /**
     * Operation addAudienceToAudienceGroupWithHttpInfo
     *
     * @param  \LINE\Clients\ManageAudience\Model\AddAudienceToAudienceGroupRequest $addAudienceToAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudienceToAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAudienceToAudienceGroupWithHttpInfo($addAudienceToAudienceGroupRequest, string $contentType = self::contentTypes['addAudienceToAudienceGroup'][0])
    {
        $request = $this->addAudienceToAudienceGroupRequest($addAudienceToAudienceGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addAudienceToAudienceGroupAsync
     *
     * @param  \LINE\Clients\ManageAudience\Model\AddAudienceToAudienceGroupRequest $addAudienceToAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudienceToAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAudienceToAudienceGroupAsync($addAudienceToAudienceGroupRequest, string $contentType = self::contentTypes['addAudienceToAudienceGroup'][0])
    {
        return $this->addAudienceToAudienceGroupAsyncWithHttpInfo($addAudienceToAudienceGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAudienceToAudienceGroupAsyncWithHttpInfo
     *
     * @param  \LINE\Clients\ManageAudience\Model\AddAudienceToAudienceGroupRequest $addAudienceToAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudienceToAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAudienceToAudienceGroupAsyncWithHttpInfo($addAudienceToAudienceGroupRequest, string $contentType = self::contentTypes['addAudienceToAudienceGroup'][0])
    {
        $returnType = '';
        $request = $this->addAudienceToAudienceGroupRequest($addAudienceToAudienceGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addAudienceToAudienceGroup'
     *
     * @param  \LINE\Clients\ManageAudience\Model\AddAudienceToAudienceGroupRequest $addAudienceToAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudienceToAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAudienceToAudienceGroupRequest($addAudienceToAudienceGroupRequest, string $contentType = self::contentTypes['addAudienceToAudienceGroup'][0])
    {

        // verify the required parameter 'addAudienceToAudienceGroupRequest' is set
        if ($addAudienceToAudienceGroupRequest === null || (is_array($addAudienceToAudienceGroupRequest) && count($addAudienceToAudienceGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addAudienceToAudienceGroupRequest when calling addAudienceToAudienceGroup'
            );
        }


        $resourcePath = '/v2/bot/audienceGroup/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($addAudienceToAudienceGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($addAudienceToAudienceGroupRequest));
            } else {
                $httpBody = $addAudienceToAudienceGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAudienceGroup
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateAudienceGroupRequest $createAudienceGroupRequest createAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\ManageAudience\Model\CreateAudienceGroupResponse
     */
    public function createAudienceGroup($createAudienceGroupRequest, string $contentType = self::contentTypes['createAudienceGroup'][0])
    {
        list($response) = $this->createAudienceGroupWithHttpInfo($createAudienceGroupRequest, $contentType);
        return $response;
    }

    /**
     * Operation createAudienceGroupWithHttpInfo
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateAudienceGroupRequest $createAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\ManageAudience\Model\CreateAudienceGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAudienceGroupWithHttpInfo($createAudienceGroupRequest, string $contentType = self::contentTypes['createAudienceGroup'][0])
    {
        $request = $this->createAudienceGroupRequest($createAudienceGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\ManageAudience\Model\CreateAudienceGroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\ManageAudience\Model\CreateAudienceGroupResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\ManageAudience\Model\CreateAudienceGroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\ManageAudience\Model\CreateAudienceGroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\ManageAudience\Model\CreateAudienceGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAudienceGroupAsync
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateAudienceGroupRequest $createAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAudienceGroupAsync($createAudienceGroupRequest, string $contentType = self::contentTypes['createAudienceGroup'][0])
    {
        return $this->createAudienceGroupAsyncWithHttpInfo($createAudienceGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAudienceGroupAsyncWithHttpInfo
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateAudienceGroupRequest $createAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAudienceGroupAsyncWithHttpInfo($createAudienceGroupRequest, string $contentType = self::contentTypes['createAudienceGroup'][0])
    {
        $returnType = '\LINE\Clients\ManageAudience\Model\CreateAudienceGroupResponse';
        $request = $this->createAudienceGroupRequest($createAudienceGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAudienceGroup'
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateAudienceGroupRequest $createAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAudienceGroupRequest($createAudienceGroupRequest, string $contentType = self::contentTypes['createAudienceGroup'][0])
    {

        // verify the required parameter 'createAudienceGroupRequest' is set
        if ($createAudienceGroupRequest === null || (is_array($createAudienceGroupRequest) && count($createAudienceGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createAudienceGroupRequest when calling createAudienceGroup'
            );
        }


        $resourcePath = '/v2/bot/audienceGroup/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createAudienceGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createAudienceGroupRequest));
            } else {
                $httpBody = $createAudienceGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createClickBasedAudienceGroup
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupRequest $createClickBasedAudienceGroupRequest createClickBasedAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClickBasedAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupResponse
     */
    public function createClickBasedAudienceGroup($createClickBasedAudienceGroupRequest, string $contentType = self::contentTypes['createClickBasedAudienceGroup'][0])
    {
        list($response) = $this->createClickBasedAudienceGroupWithHttpInfo($createClickBasedAudienceGroupRequest, $contentType);
        return $response;
    }

    /**
     * Operation createClickBasedAudienceGroupWithHttpInfo
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupRequest $createClickBasedAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClickBasedAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createClickBasedAudienceGroupWithHttpInfo($createClickBasedAudienceGroupRequest, string $contentType = self::contentTypes['createClickBasedAudienceGroup'][0])
    {
        $request = $this->createClickBasedAudienceGroupRequest($createClickBasedAudienceGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createClickBasedAudienceGroupAsync
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupRequest $createClickBasedAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClickBasedAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClickBasedAudienceGroupAsync($createClickBasedAudienceGroupRequest, string $contentType = self::contentTypes['createClickBasedAudienceGroup'][0])
    {
        return $this->createClickBasedAudienceGroupAsyncWithHttpInfo($createClickBasedAudienceGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createClickBasedAudienceGroupAsyncWithHttpInfo
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupRequest $createClickBasedAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClickBasedAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClickBasedAudienceGroupAsyncWithHttpInfo($createClickBasedAudienceGroupRequest, string $contentType = self::contentTypes['createClickBasedAudienceGroup'][0])
    {
        $returnType = '\LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupResponse';
        $request = $this->createClickBasedAudienceGroupRequest($createClickBasedAudienceGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createClickBasedAudienceGroup'
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateClickBasedAudienceGroupRequest $createClickBasedAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClickBasedAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createClickBasedAudienceGroupRequest($createClickBasedAudienceGroupRequest, string $contentType = self::contentTypes['createClickBasedAudienceGroup'][0])
    {

        // verify the required parameter 'createClickBasedAudienceGroupRequest' is set
        if ($createClickBasedAudienceGroupRequest === null || (is_array($createClickBasedAudienceGroupRequest) && count($createClickBasedAudienceGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createClickBasedAudienceGroupRequest when calling createClickBasedAudienceGroup'
            );
        }


        $resourcePath = '/v2/bot/audienceGroup/click';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createClickBasedAudienceGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createClickBasedAudienceGroupRequest));
            } else {
                $httpBody = $createClickBasedAudienceGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createImpBasedAudienceGroup
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupRequest $createImpBasedAudienceGroupRequest createImpBasedAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createImpBasedAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupResponse
     */
    public function createImpBasedAudienceGroup($createImpBasedAudienceGroupRequest, string $contentType = self::contentTypes['createImpBasedAudienceGroup'][0])
    {
        list($response) = $this->createImpBasedAudienceGroupWithHttpInfo($createImpBasedAudienceGroupRequest, $contentType);
        return $response;
    }

    /**
     * Operation createImpBasedAudienceGroupWithHttpInfo
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupRequest $createImpBasedAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createImpBasedAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createImpBasedAudienceGroupWithHttpInfo($createImpBasedAudienceGroupRequest, string $contentType = self::contentTypes['createImpBasedAudienceGroup'][0])
    {
        $request = $this->createImpBasedAudienceGroupRequest($createImpBasedAudienceGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createImpBasedAudienceGroupAsync
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupRequest $createImpBasedAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createImpBasedAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createImpBasedAudienceGroupAsync($createImpBasedAudienceGroupRequest, string $contentType = self::contentTypes['createImpBasedAudienceGroup'][0])
    {
        return $this->createImpBasedAudienceGroupAsyncWithHttpInfo($createImpBasedAudienceGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createImpBasedAudienceGroupAsyncWithHttpInfo
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupRequest $createImpBasedAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createImpBasedAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createImpBasedAudienceGroupAsyncWithHttpInfo($createImpBasedAudienceGroupRequest, string $contentType = self::contentTypes['createImpBasedAudienceGroup'][0])
    {
        $returnType = '\LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupResponse';
        $request = $this->createImpBasedAudienceGroupRequest($createImpBasedAudienceGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createImpBasedAudienceGroup'
     *
     * @param  \LINE\Clients\ManageAudience\Model\CreateImpBasedAudienceGroupRequest $createImpBasedAudienceGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createImpBasedAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createImpBasedAudienceGroupRequest($createImpBasedAudienceGroupRequest, string $contentType = self::contentTypes['createImpBasedAudienceGroup'][0])
    {

        // verify the required parameter 'createImpBasedAudienceGroupRequest' is set
        if ($createImpBasedAudienceGroupRequest === null || (is_array($createImpBasedAudienceGroupRequest) && count($createImpBasedAudienceGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createImpBasedAudienceGroupRequest when calling createImpBasedAudienceGroup'
            );
        }


        $resourcePath = '/v2/bot/audienceGroup/imp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createImpBasedAudienceGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createImpBasedAudienceGroupRequest));
            } else {
                $httpBody = $createImpBasedAudienceGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAudienceGroup
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAudienceGroup($audienceGroupId, string $contentType = self::contentTypes['deleteAudienceGroup'][0])
    {
        $this->deleteAudienceGroupWithHttpInfo($audienceGroupId, $contentType);
    }

    /**
     * Operation deleteAudienceGroupWithHttpInfo
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroup'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAudienceGroupWithHttpInfo($audienceGroupId, string $contentType = self::contentTypes['deleteAudienceGroup'][0])
    {
        $request = $this->deleteAudienceGroupRequest($audienceGroupId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAudienceGroupAsync
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAudienceGroupAsync($audienceGroupId, string $contentType = self::contentTypes['deleteAudienceGroup'][0])
    {
        return $this->deleteAudienceGroupAsyncWithHttpInfo($audienceGroupId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAudienceGroupAsyncWithHttpInfo
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAudienceGroupAsyncWithHttpInfo($audienceGroupId, string $contentType = self::contentTypes['deleteAudienceGroup'][0])
    {
        $returnType = '';
        $request = $this->deleteAudienceGroupRequest($audienceGroupId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAudienceGroup'
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAudienceGroupRequest($audienceGroupId, string $contentType = self::contentTypes['deleteAudienceGroup'][0])
    {

        // verify the required parameter 'audienceGroupId' is set
        if ($audienceGroupId === null || (is_array($audienceGroupId) && count($audienceGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audienceGroupId when calling deleteAudienceGroup'
            );
        }


        $resourcePath = '/v2/bot/audienceGroup/{audienceGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($audienceGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'audienceGroupId' . '}',
                ObjectSerializer::toPathValue($audienceGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAudienceData
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceData'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\ManageAudience\Model\GetAudienceDataResponse|\LINE\Clients\ManageAudience\Model\ErrorResponse
     */
    public function getAudienceData($audienceGroupId, string $contentType = self::contentTypes['getAudienceData'][0])
    {
        list($response) = $this->getAudienceDataWithHttpInfo($audienceGroupId, $contentType);
        return $response;
    }

    /**
     * Operation getAudienceDataWithHttpInfo
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceData'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\ManageAudience\Model\GetAudienceDataResponse|\LINE\Clients\ManageAudience\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAudienceDataWithHttpInfo($audienceGroupId, string $contentType = self::contentTypes['getAudienceData'][0])
    {
        $request = $this->getAudienceDataRequest($audienceGroupId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\ManageAudience\Model\GetAudienceDataResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\ManageAudience\Model\GetAudienceDataResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\ManageAudience\Model\GetAudienceDataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\LINE\Clients\ManageAudience\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\ManageAudience\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\ManageAudience\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\ManageAudience\Model\GetAudienceDataResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\ManageAudience\Model\GetAudienceDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\ManageAudience\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAudienceDataAsync
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceDataAsync($audienceGroupId, string $contentType = self::contentTypes['getAudienceData'][0])
    {
        return $this->getAudienceDataAsyncWithHttpInfo($audienceGroupId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAudienceDataAsyncWithHttpInfo
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceDataAsyncWithHttpInfo($audienceGroupId, string $contentType = self::contentTypes['getAudienceData'][0])
    {
        $returnType = '\LINE\Clients\ManageAudience\Model\GetAudienceDataResponse';
        $request = $this->getAudienceDataRequest($audienceGroupId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAudienceData'
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAudienceDataRequest($audienceGroupId, string $contentType = self::contentTypes['getAudienceData'][0])
    {

        // verify the required parameter 'audienceGroupId' is set
        if ($audienceGroupId === null || (is_array($audienceGroupId) && count($audienceGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audienceGroupId when calling getAudienceData'
            );
        }


        $resourcePath = '/v2/bot/audienceGroup/{audienceGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($audienceGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'audienceGroupId' . '}',
                ObjectSerializer::toPathValue($audienceGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAudienceGroupAuthorityLevel
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAuthorityLevel'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\ManageAudience\Model\GetAudienceGroupAuthorityLevelResponse
     */
    public function getAudienceGroupAuthorityLevel(string $contentType = self::contentTypes['getAudienceGroupAuthorityLevel'][0])
    {
        list($response) = $this->getAudienceGroupAuthorityLevelWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getAudienceGroupAuthorityLevelWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAuthorityLevel'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\ManageAudience\Model\GetAudienceGroupAuthorityLevelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAudienceGroupAuthorityLevelWithHttpInfo(string $contentType = self::contentTypes['getAudienceGroupAuthorityLevel'][0])
    {
        $request = $this->getAudienceGroupAuthorityLevelRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\ManageAudience\Model\GetAudienceGroupAuthorityLevelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\ManageAudience\Model\GetAudienceGroupAuthorityLevelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\ManageAudience\Model\GetAudienceGroupAuthorityLevelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\ManageAudience\Model\GetAudienceGroupAuthorityLevelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\ManageAudience\Model\GetAudienceGroupAuthorityLevelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAudienceGroupAuthorityLevelAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAuthorityLevel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceGroupAuthorityLevelAsync(string $contentType = self::contentTypes['getAudienceGroupAuthorityLevel'][0])
    {
        return $this->getAudienceGroupAuthorityLevelAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAudienceGroupAuthorityLevelAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAuthorityLevel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceGroupAuthorityLevelAsyncWithHttpInfo(string $contentType = self::contentTypes['getAudienceGroupAuthorityLevel'][0])
    {
        $returnType = '\LINE\Clients\ManageAudience\Model\GetAudienceGroupAuthorityLevelResponse';
        $request = $this->getAudienceGroupAuthorityLevelRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAudienceGroupAuthorityLevel'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAuthorityLevel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAudienceGroupAuthorityLevelRequest(string $contentType = self::contentTypes['getAudienceGroupAuthorityLevel'][0])
    {


        $resourcePath = '/v2/bot/audienceGroup/authorityLevel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAudienceGroups
     *
     * @param  int $page The page to return when getting (paginated) results. Must be 1 or higher. (required)
     * @param  string $description The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion. (optional)
     * @param  AudienceGroupStatus $status The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion. (optional)
     * @param  int $size The number of audiences per page. Default: 20 Max: 40 (optional)
     * @param  bool $includesExternalPublicGroups true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel. (optional)
     * @param  AudienceGroupCreateRoute $createRoute How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroups'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\ManageAudience\Model\GetAudienceGroupsResponse
     */
    public function getAudienceGroups($page, $description = null, $status = null, $size = null, $includesExternalPublicGroups = null, $createRoute = null, string $contentType = self::contentTypes['getAudienceGroups'][0])
    {
        list($response) = $this->getAudienceGroupsWithHttpInfo($page, $description, $status, $size, $includesExternalPublicGroups, $createRoute, $contentType);
        return $response;
    }

    /**
     * Operation getAudienceGroupsWithHttpInfo
     *
     * @param  int $page The page to return when getting (paginated) results. Must be 1 or higher. (required)
     * @param  string $description The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion. (optional)
     * @param  AudienceGroupStatus $status The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion. (optional)
     * @param  int $size The number of audiences per page. Default: 20 Max: 40 (optional)
     * @param  bool $includesExternalPublicGroups true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel. (optional)
     * @param  AudienceGroupCreateRoute $createRoute How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroups'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\ManageAudience\Model\GetAudienceGroupsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAudienceGroupsWithHttpInfo($page, $description = null, $status = null, $size = null, $includesExternalPublicGroups = null, $createRoute = null, string $contentType = self::contentTypes['getAudienceGroups'][0])
    {
        $request = $this->getAudienceGroupsRequest($page, $description, $status, $size, $includesExternalPublicGroups, $createRoute, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\ManageAudience\Model\GetAudienceGroupsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\ManageAudience\Model\GetAudienceGroupsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\ManageAudience\Model\GetAudienceGroupsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\ManageAudience\Model\GetAudienceGroupsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\ManageAudience\Model\GetAudienceGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAudienceGroupsAsync
     *
     * @param  int $page The page to return when getting (paginated) results. Must be 1 or higher. (required)
     * @param  string $description The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion. (optional)
     * @param  AudienceGroupStatus $status The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion. (optional)
     * @param  int $size The number of audiences per page. Default: 20 Max: 40 (optional)
     * @param  bool $includesExternalPublicGroups true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel. (optional)
     * @param  AudienceGroupCreateRoute $createRoute How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceGroupsAsync($page, $description = null, $status = null, $size = null, $includesExternalPublicGroups = null, $createRoute = null, string $contentType = self::contentTypes['getAudienceGroups'][0])
    {
        return $this->getAudienceGroupsAsyncWithHttpInfo($page, $description, $status, $size, $includesExternalPublicGroups, $createRoute, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAudienceGroupsAsyncWithHttpInfo
     *
     * @param  int $page The page to return when getting (paginated) results. Must be 1 or higher. (required)
     * @param  string $description The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion. (optional)
     * @param  AudienceGroupStatus $status The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion. (optional)
     * @param  int $size The number of audiences per page. Default: 20 Max: 40 (optional)
     * @param  bool $includesExternalPublicGroups true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel. (optional)
     * @param  AudienceGroupCreateRoute $createRoute How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceGroupsAsyncWithHttpInfo($page, $description = null, $status = null, $size = null, $includesExternalPublicGroups = null, $createRoute = null, string $contentType = self::contentTypes['getAudienceGroups'][0])
    {
        $returnType = '\LINE\Clients\ManageAudience\Model\GetAudienceGroupsResponse';
        $request = $this->getAudienceGroupsRequest($page, $description, $status, $size, $includesExternalPublicGroups, $createRoute, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAudienceGroups'
     *
     * @param  int $page The page to return when getting (paginated) results. Must be 1 or higher. (required)
     * @param  string $description The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion. (optional)
     * @param  AudienceGroupStatus $status The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion. (optional)
     * @param  int $size The number of audiences per page. Default: 20 Max: 40 (optional)
     * @param  bool $includesExternalPublicGroups true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel. (optional)
     * @param  AudienceGroupCreateRoute $createRoute How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAudienceGroupsRequest($page, $description = null, $status = null, $size = null, $includesExternalPublicGroups = null, $createRoute = null, string $contentType = self::contentTypes['getAudienceGroups'][0])
    {

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getAudienceGroups'
            );
        }
        if ($page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ManageAudienceApi.getAudienceGroups, must be bigger than or equal to 1.');
        }
        


        if ($size !== null && $size > 40) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ManageAudienceApi.getAudienceGroups, must be smaller than or equal to 40.');
        }
        



        $resourcePath = '/v2/bot/audienceGroup/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'AudienceGroupStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includesExternalPublicGroups,
            'includesExternalPublicGroups', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createRoute,
            'createRoute', // param base name
            'AudienceGroupCreateRoute', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAudienceGroupAuthorityLevel
     *
     * @param  \LINE\Clients\ManageAudience\Model\UpdateAudienceGroupAuthorityLevelRequest $updateAudienceGroupAuthorityLevelRequest updateAudienceGroupAuthorityLevelRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroupAuthorityLevel'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAudienceGroupAuthorityLevel($updateAudienceGroupAuthorityLevelRequest, string $contentType = self::contentTypes['updateAudienceGroupAuthorityLevel'][0])
    {
        $this->updateAudienceGroupAuthorityLevelWithHttpInfo($updateAudienceGroupAuthorityLevelRequest, $contentType);
    }

    /**
     * Operation updateAudienceGroupAuthorityLevelWithHttpInfo
     *
     * @param  \LINE\Clients\ManageAudience\Model\UpdateAudienceGroupAuthorityLevelRequest $updateAudienceGroupAuthorityLevelRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroupAuthorityLevel'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAudienceGroupAuthorityLevelWithHttpInfo($updateAudienceGroupAuthorityLevelRequest, string $contentType = self::contentTypes['updateAudienceGroupAuthorityLevel'][0])
    {
        $request = $this->updateAudienceGroupAuthorityLevelRequest($updateAudienceGroupAuthorityLevelRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateAudienceGroupAuthorityLevelAsync
     *
     * @param  \LINE\Clients\ManageAudience\Model\UpdateAudienceGroupAuthorityLevelRequest $updateAudienceGroupAuthorityLevelRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroupAuthorityLevel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAudienceGroupAuthorityLevelAsync($updateAudienceGroupAuthorityLevelRequest, string $contentType = self::contentTypes['updateAudienceGroupAuthorityLevel'][0])
    {
        return $this->updateAudienceGroupAuthorityLevelAsyncWithHttpInfo($updateAudienceGroupAuthorityLevelRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAudienceGroupAuthorityLevelAsyncWithHttpInfo
     *
     * @param  \LINE\Clients\ManageAudience\Model\UpdateAudienceGroupAuthorityLevelRequest $updateAudienceGroupAuthorityLevelRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroupAuthorityLevel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAudienceGroupAuthorityLevelAsyncWithHttpInfo($updateAudienceGroupAuthorityLevelRequest, string $contentType = self::contentTypes['updateAudienceGroupAuthorityLevel'][0])
    {
        $returnType = '';
        $request = $this->updateAudienceGroupAuthorityLevelRequest($updateAudienceGroupAuthorityLevelRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAudienceGroupAuthorityLevel'
     *
     * @param  \LINE\Clients\ManageAudience\Model\UpdateAudienceGroupAuthorityLevelRequest $updateAudienceGroupAuthorityLevelRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroupAuthorityLevel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAudienceGroupAuthorityLevelRequest($updateAudienceGroupAuthorityLevelRequest, string $contentType = self::contentTypes['updateAudienceGroupAuthorityLevel'][0])
    {

        // verify the required parameter 'updateAudienceGroupAuthorityLevelRequest' is set
        if ($updateAudienceGroupAuthorityLevelRequest === null || (is_array($updateAudienceGroupAuthorityLevelRequest) && count($updateAudienceGroupAuthorityLevelRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateAudienceGroupAuthorityLevelRequest when calling updateAudienceGroupAuthorityLevel'
            );
        }


        $resourcePath = '/v2/bot/audienceGroup/authorityLevel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateAudienceGroupAuthorityLevelRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateAudienceGroupAuthorityLevelRequest));
            } else {
                $httpBody = $updateAudienceGroupAuthorityLevelRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAudienceGroupDescription
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  \LINE\Clients\ManageAudience\Model\UpdateAudienceGroupDescriptionRequest $updateAudienceGroupDescriptionRequest updateAudienceGroupDescriptionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroupDescription'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAudienceGroupDescription($audienceGroupId, $updateAudienceGroupDescriptionRequest, string $contentType = self::contentTypes['updateAudienceGroupDescription'][0])
    {
        $this->updateAudienceGroupDescriptionWithHttpInfo($audienceGroupId, $updateAudienceGroupDescriptionRequest, $contentType);
    }

    /**
     * Operation updateAudienceGroupDescriptionWithHttpInfo
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  \LINE\Clients\ManageAudience\Model\UpdateAudienceGroupDescriptionRequest $updateAudienceGroupDescriptionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroupDescription'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\ManageAudience\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAudienceGroupDescriptionWithHttpInfo($audienceGroupId, $updateAudienceGroupDescriptionRequest, string $contentType = self::contentTypes['updateAudienceGroupDescription'][0])
    {
        $request = $this->updateAudienceGroupDescriptionRequest($audienceGroupId, $updateAudienceGroupDescriptionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateAudienceGroupDescriptionAsync
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  \LINE\Clients\ManageAudience\Model\UpdateAudienceGroupDescriptionRequest $updateAudienceGroupDescriptionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroupDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAudienceGroupDescriptionAsync($audienceGroupId, $updateAudienceGroupDescriptionRequest, string $contentType = self::contentTypes['updateAudienceGroupDescription'][0])
    {
        return $this->updateAudienceGroupDescriptionAsyncWithHttpInfo($audienceGroupId, $updateAudienceGroupDescriptionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAudienceGroupDescriptionAsyncWithHttpInfo
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  \LINE\Clients\ManageAudience\Model\UpdateAudienceGroupDescriptionRequest $updateAudienceGroupDescriptionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroupDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAudienceGroupDescriptionAsyncWithHttpInfo($audienceGroupId, $updateAudienceGroupDescriptionRequest, string $contentType = self::contentTypes['updateAudienceGroupDescription'][0])
    {
        $returnType = '';
        $request = $this->updateAudienceGroupDescriptionRequest($audienceGroupId, $updateAudienceGroupDescriptionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAudienceGroupDescription'
     *
     * @param  int $audienceGroupId The audience ID. (required)
     * @param  \LINE\Clients\ManageAudience\Model\UpdateAudienceGroupDescriptionRequest $updateAudienceGroupDescriptionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroupDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAudienceGroupDescriptionRequest($audienceGroupId, $updateAudienceGroupDescriptionRequest, string $contentType = self::contentTypes['updateAudienceGroupDescription'][0])
    {

        // verify the required parameter 'audienceGroupId' is set
        if ($audienceGroupId === null || (is_array($audienceGroupId) && count($audienceGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audienceGroupId when calling updateAudienceGroupDescription'
            );
        }

        // verify the required parameter 'updateAudienceGroupDescriptionRequest' is set
        if ($updateAudienceGroupDescriptionRequest === null || (is_array($updateAudienceGroupDescriptionRequest) && count($updateAudienceGroupDescriptionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateAudienceGroupDescriptionRequest when calling updateAudienceGroupDescription'
            );
        }


        $resourcePath = '/v2/bot/audienceGroup/{audienceGroupId}/updateDescription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($audienceGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'audienceGroupId' . '}',
                ObjectSerializer::toPathValue($audienceGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateAudienceGroupDescriptionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateAudienceGroupDescriptionRequest));
            } else {
                $httpBody = $updateAudienceGroupDescriptionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
