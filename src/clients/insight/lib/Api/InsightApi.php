<?php
/**
 * Copyright 2024 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/**
 * InsightApi
 * PHP version 7.4
 *
 * @category Class
 * @package  LINE\Clients\Insight
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LINE Messaging API(Insight)
 *
 * This document describes LINE Messaging API(Insight).
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LINE\Clients\Insight\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LINE\Clients\Insight\ApiException;
use LINE\Clients\Insight\Configuration;
use LINE\Clients\Insight\HeaderSelector;
use LINE\Clients\Insight\ObjectSerializer;

/**
 * InsightApi Class Doc Comment
 *
 * @category Class
 * @package  LINE\Clients\Insight
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InsightApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getFriendsDemographics' => [
            'application/json',
        ],
        'getMessageEvent' => [
            'application/json',
        ],
        'getNumberOfFollowers' => [
            'application/json',
        ],
        'getNumberOfMessageDeliveries' => [
            'application/json',
        ],
        'getStatisticsPerUnit' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getFriendsDemographics
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFriendsDemographics'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Insight\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\Insight\Model\GetFriendsDemographicsResponse
     */
    public function getFriendsDemographics(string $contentType = self::contentTypes['getFriendsDemographics'][0])
    {
        list($response) = $this->getFriendsDemographicsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getFriendsDemographicsWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFriendsDemographics'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Insight\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\Insight\Model\GetFriendsDemographicsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFriendsDemographicsWithHttpInfo(string $contentType = self::contentTypes['getFriendsDemographics'][0])
    {
        $request = $this->getFriendsDemographicsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\Insight\Model\GetFriendsDemographicsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\Insight\Model\GetFriendsDemographicsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\Insight\Model\GetFriendsDemographicsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\Insight\Model\GetFriendsDemographicsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\Insight\Model\GetFriendsDemographicsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFriendsDemographicsAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFriendsDemographics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendsDemographicsAsync(string $contentType = self::contentTypes['getFriendsDemographics'][0])
    {
        return $this->getFriendsDemographicsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFriendsDemographicsAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFriendsDemographics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendsDemographicsAsyncWithHttpInfo(string $contentType = self::contentTypes['getFriendsDemographics'][0])
    {
        $returnType = '\LINE\Clients\Insight\Model\GetFriendsDemographicsResponse';
        $request = $this->getFriendsDemographicsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFriendsDemographics'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFriendsDemographics'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFriendsDemographicsRequest(string $contentType = self::contentTypes['getFriendsDemographics'][0])
    {


        $resourcePath = '/v2/bot/insight/demographic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMessageEvent
     *
     * Get user interaction statistics
     *
     * @param  string $requestId Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageEvent'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Insight\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\Insight\Model\GetMessageEventResponse
     */
    public function getMessageEvent($requestId, string $contentType = self::contentTypes['getMessageEvent'][0])
    {
        list($response) = $this->getMessageEventWithHttpInfo($requestId, $contentType);
        return $response;
    }

    /**
     * Operation getMessageEventWithHttpInfo
     *
     * Get user interaction statistics
     *
     * @param  string $requestId Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageEvent'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Insight\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\Insight\Model\GetMessageEventResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessageEventWithHttpInfo($requestId, string $contentType = self::contentTypes['getMessageEvent'][0])
    {
        $request = $this->getMessageEventRequest($requestId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\Insight\Model\GetMessageEventResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\Insight\Model\GetMessageEventResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\Insight\Model\GetMessageEventResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\Insight\Model\GetMessageEventResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\Insight\Model\GetMessageEventResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMessageEventAsync
     *
     * Get user interaction statistics
     *
     * @param  string $requestId Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessageEventAsync($requestId, string $contentType = self::contentTypes['getMessageEvent'][0])
    {
        return $this->getMessageEventAsyncWithHttpInfo($requestId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMessageEventAsyncWithHttpInfo
     *
     * Get user interaction statistics
     *
     * @param  string $requestId Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessageEventAsyncWithHttpInfo($requestId, string $contentType = self::contentTypes['getMessageEvent'][0])
    {
        $returnType = '\LINE\Clients\Insight\Model\GetMessageEventResponse';
        $request = $this->getMessageEventRequest($requestId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMessageEvent'
     *
     * @param  string $requestId Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMessageEventRequest($requestId, string $contentType = self::contentTypes['getMessageEvent'][0])
    {

        // verify the required parameter 'requestId' is set
        if ($requestId === null || (is_array($requestId) && count($requestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestId when calling getMessageEvent'
            );
        }
        if (strlen($requestId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$requestId" when calling InsightApi.getMessageEvent, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/bot/insight/message/event';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $requestId,
            'requestId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNumberOfFollowers
     *
     * Get number of followers
     *
     * @param  string $date Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNumberOfFollowers'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Insight\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\Insight\Model\GetNumberOfFollowersResponse
     */
    public function getNumberOfFollowers($date = null, string $contentType = self::contentTypes['getNumberOfFollowers'][0])
    {
        list($response) = $this->getNumberOfFollowersWithHttpInfo($date, $contentType);
        return $response;
    }

    /**
     * Operation getNumberOfFollowersWithHttpInfo
     *
     * Get number of followers
     *
     * @param  string $date Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNumberOfFollowers'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Insight\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\Insight\Model\GetNumberOfFollowersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNumberOfFollowersWithHttpInfo($date = null, string $contentType = self::contentTypes['getNumberOfFollowers'][0])
    {
        $request = $this->getNumberOfFollowersRequest($date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\Insight\Model\GetNumberOfFollowersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\Insight\Model\GetNumberOfFollowersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\Insight\Model\GetNumberOfFollowersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\Insight\Model\GetNumberOfFollowersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\Insight\Model\GetNumberOfFollowersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNumberOfFollowersAsync
     *
     * Get number of followers
     *
     * @param  string $date Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNumberOfFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumberOfFollowersAsync($date = null, string $contentType = self::contentTypes['getNumberOfFollowers'][0])
    {
        return $this->getNumberOfFollowersAsyncWithHttpInfo($date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNumberOfFollowersAsyncWithHttpInfo
     *
     * Get number of followers
     *
     * @param  string $date Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNumberOfFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumberOfFollowersAsyncWithHttpInfo($date = null, string $contentType = self::contentTypes['getNumberOfFollowers'][0])
    {
        $returnType = '\LINE\Clients\Insight\Model\GetNumberOfFollowersResponse';
        $request = $this->getNumberOfFollowersRequest($date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNumberOfFollowers'
     *
     * @param  string $date Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNumberOfFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNumberOfFollowersRequest($date = null, string $contentType = self::contentTypes['getNumberOfFollowers'][0])
    {

        if ($date !== null && strlen($date) > 8) {
            throw new \InvalidArgumentException('invalid length for "$date" when calling InsightApi.getNumberOfFollowers, must be smaller than or equal to 8.');
        }
        if ($date !== null && strlen($date) < 8) {
            throw new \InvalidArgumentException('invalid length for "$date" when calling InsightApi.getNumberOfFollowers, must be bigger than or equal to 8.');
        }
        if ($date !== null && !preg_match("/^[0-9]{8}$/", $date)) {
            throw new \InvalidArgumentException("invalid value for \"date\" when calling InsightApi.getNumberOfFollowers, must conform to the pattern /^[0-9]{8}$/.");
        }
        

        $resourcePath = '/v2/bot/insight/followers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNumberOfMessageDeliveries
     *
     * Get number of message deliveries
     *
     * @param  string $date Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNumberOfMessageDeliveries'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Insight\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\Insight\Model\GetNumberOfMessageDeliveriesResponse
     */
    public function getNumberOfMessageDeliveries($date, string $contentType = self::contentTypes['getNumberOfMessageDeliveries'][0])
    {
        list($response) = $this->getNumberOfMessageDeliveriesWithHttpInfo($date, $contentType);
        return $response;
    }

    /**
     * Operation getNumberOfMessageDeliveriesWithHttpInfo
     *
     * Get number of message deliveries
     *
     * @param  string $date Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNumberOfMessageDeliveries'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Insight\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\Insight\Model\GetNumberOfMessageDeliveriesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNumberOfMessageDeliveriesWithHttpInfo($date, string $contentType = self::contentTypes['getNumberOfMessageDeliveries'][0])
    {
        $request = $this->getNumberOfMessageDeliveriesRequest($date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\Insight\Model\GetNumberOfMessageDeliveriesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\Insight\Model\GetNumberOfMessageDeliveriesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\Insight\Model\GetNumberOfMessageDeliveriesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\Insight\Model\GetNumberOfMessageDeliveriesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\Insight\Model\GetNumberOfMessageDeliveriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNumberOfMessageDeliveriesAsync
     *
     * Get number of message deliveries
     *
     * @param  string $date Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNumberOfMessageDeliveries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumberOfMessageDeliveriesAsync($date, string $contentType = self::contentTypes['getNumberOfMessageDeliveries'][0])
    {
        return $this->getNumberOfMessageDeliveriesAsyncWithHttpInfo($date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNumberOfMessageDeliveriesAsyncWithHttpInfo
     *
     * Get number of message deliveries
     *
     * @param  string $date Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNumberOfMessageDeliveries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumberOfMessageDeliveriesAsyncWithHttpInfo($date, string $contentType = self::contentTypes['getNumberOfMessageDeliveries'][0])
    {
        $returnType = '\LINE\Clients\Insight\Model\GetNumberOfMessageDeliveriesResponse';
        $request = $this->getNumberOfMessageDeliveriesRequest($date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNumberOfMessageDeliveries'
     *
     * @param  string $date Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNumberOfMessageDeliveries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNumberOfMessageDeliveriesRequest($date, string $contentType = self::contentTypes['getNumberOfMessageDeliveries'][0])
    {

        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling getNumberOfMessageDeliveries'
            );
        }
        if (strlen($date) > 8) {
            throw new \InvalidArgumentException('invalid length for "$date" when calling InsightApi.getNumberOfMessageDeliveries, must be smaller than or equal to 8.');
        }
        if (strlen($date) < 8) {
            throw new \InvalidArgumentException('invalid length for "$date" when calling InsightApi.getNumberOfMessageDeliveries, must be bigger than or equal to 8.');
        }
        if (!preg_match("/^[0-9]{8}$/", $date)) {
            throw new \InvalidArgumentException("invalid value for \"date\" when calling InsightApi.getNumberOfMessageDeliveries, must conform to the pattern /^[0-9]{8}$/.");
        }
        

        $resourcePath = '/v2/bot/insight/message/delivery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatisticsPerUnit
     *
     * @param  string $customAggregationUnit Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. (required)
     * @param  string $from Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 (required)
     * @param  string $to End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatisticsPerUnit'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Insight\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\Insight\Model\GetStatisticsPerUnitResponse
     */
    public function getStatisticsPerUnit($customAggregationUnit, $from, $to, string $contentType = self::contentTypes['getStatisticsPerUnit'][0])
    {
        list($response) = $this->getStatisticsPerUnitWithHttpInfo($customAggregationUnit, $from, $to, $contentType);
        return $response;
    }

    /**
     * Operation getStatisticsPerUnitWithHttpInfo
     *
     * @param  string $customAggregationUnit Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. (required)
     * @param  string $from Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 (required)
     * @param  string $to End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatisticsPerUnit'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Insight\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\Insight\Model\GetStatisticsPerUnitResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatisticsPerUnitWithHttpInfo($customAggregationUnit, $from, $to, string $contentType = self::contentTypes['getStatisticsPerUnit'][0])
    {
        $request = $this->getStatisticsPerUnitRequest($customAggregationUnit, $from, $to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\Insight\Model\GetStatisticsPerUnitResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\Insight\Model\GetStatisticsPerUnitResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\Insight\Model\GetStatisticsPerUnitResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\Insight\Model\GetStatisticsPerUnitResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\Insight\Model\GetStatisticsPerUnitResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatisticsPerUnitAsync
     *
     * @param  string $customAggregationUnit Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. (required)
     * @param  string $from Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 (required)
     * @param  string $to End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatisticsPerUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatisticsPerUnitAsync($customAggregationUnit, $from, $to, string $contentType = self::contentTypes['getStatisticsPerUnit'][0])
    {
        return $this->getStatisticsPerUnitAsyncWithHttpInfo($customAggregationUnit, $from, $to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatisticsPerUnitAsyncWithHttpInfo
     *
     * @param  string $customAggregationUnit Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. (required)
     * @param  string $from Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 (required)
     * @param  string $to End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatisticsPerUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatisticsPerUnitAsyncWithHttpInfo($customAggregationUnit, $from, $to, string $contentType = self::contentTypes['getStatisticsPerUnit'][0])
    {
        $returnType = '\LINE\Clients\Insight\Model\GetStatisticsPerUnitResponse';
        $request = $this->getStatisticsPerUnitRequest($customAggregationUnit, $from, $to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatisticsPerUnit'
     *
     * @param  string $customAggregationUnit Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. (required)
     * @param  string $from Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 (required)
     * @param  string $to End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatisticsPerUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStatisticsPerUnitRequest($customAggregationUnit, $from, $to, string $contentType = self::contentTypes['getStatisticsPerUnit'][0])
    {

        // verify the required parameter 'customAggregationUnit' is set
        if ($customAggregationUnit === null || (is_array($customAggregationUnit) && count($customAggregationUnit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customAggregationUnit when calling getStatisticsPerUnit'
            );
        }
        if (strlen($customAggregationUnit) > 30) {
            throw new \InvalidArgumentException('invalid length for "$customAggregationUnit" when calling InsightApi.getStatisticsPerUnit, must be smaller than or equal to 30.');
        }
        if (strlen($customAggregationUnit) < 1) {
            throw new \InvalidArgumentException('invalid length for "$customAggregationUnit" when calling InsightApi.getStatisticsPerUnit, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9_]{1,30}$/", $customAggregationUnit)) {
            throw new \InvalidArgumentException("invalid value for \"customAggregationUnit\" when calling InsightApi.getStatisticsPerUnit, must conform to the pattern /^[a-zA-Z0-9_]{1,30}$/.");
        }
        
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling getStatisticsPerUnit'
            );
        }
        if (strlen($from) > 8) {
            throw new \InvalidArgumentException('invalid length for "$from" when calling InsightApi.getStatisticsPerUnit, must be smaller than or equal to 8.');
        }
        if (strlen($from) < 8) {
            throw new \InvalidArgumentException('invalid length for "$from" when calling InsightApi.getStatisticsPerUnit, must be bigger than or equal to 8.');
        }
        if (!preg_match("/^[0-9]{8}$/", $from)) {
            throw new \InvalidArgumentException("invalid value for \"from\" when calling InsightApi.getStatisticsPerUnit, must conform to the pattern /^[0-9]{8}$/.");
        }
        
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling getStatisticsPerUnit'
            );
        }
        if (strlen($to) > 8) {
            throw new \InvalidArgumentException('invalid length for "$to" when calling InsightApi.getStatisticsPerUnit, must be smaller than or equal to 8.');
        }
        if (strlen($to) < 8) {
            throw new \InvalidArgumentException('invalid length for "$to" when calling InsightApi.getStatisticsPerUnit, must be bigger than or equal to 8.');
        }
        if (!preg_match("/^[0-9]{8}$/", $to)) {
            throw new \InvalidArgumentException("invalid value for \"to\" when calling InsightApi.getStatisticsPerUnit, must conform to the pattern /^[0-9]{8}$/.");
        }
        

        $resourcePath = '/v2/bot/insight/message/event/aggregation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customAggregationUnit,
            'customAggregationUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
