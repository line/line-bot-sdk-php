<?php
/**
 * Copyright 2023 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/**
 * LiffApi
 * PHP version 7.4
 *
 * @category Class
 * @package  LINE\Clients\Liff
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LIFF server API
 *
 * LIFF Server API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LINE\Clients\Liff\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LINE\Clients\Liff\ApiException;
use LINE\Clients\Liff\Configuration;
use LINE\Clients\Liff\HeaderSelector;
use LINE\Clients\Liff\ObjectSerializer;

/**
 * LiffApi Class Doc Comment
 *
 * @category Class
 * @package  LINE\Clients\Liff
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LiffApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addLIFFApp' => [
            'application/json',
        ],
        'deleteLIFFApp' => [
            'application/json',
        ],
        'getAllLIFFApps' => [
            'application/json',
        ],
        'updateLIFFApp' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addLIFFApp
     *
     * @param  \LINE\Clients\Liff\Model\AddLiffAppRequest $addLiffAppRequest addLiffAppRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addLIFFApp'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Liff\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\Liff\Model\AddLiffAppResponse
     */
    public function addLIFFApp($addLiffAppRequest, string $contentType = self::contentTypes['addLIFFApp'][0])
    {
        list($response) = $this->addLIFFAppWithHttpInfo($addLiffAppRequest, $contentType);
        return $response;
    }

    /**
     * Operation addLIFFAppWithHttpInfo
     *
     * @param  \LINE\Clients\Liff\Model\AddLiffAppRequest $addLiffAppRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addLIFFApp'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Liff\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\Liff\Model\AddLiffAppResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLIFFAppWithHttpInfo($addLiffAppRequest, string $contentType = self::contentTypes['addLIFFApp'][0])
    {
        $request = $this->addLIFFAppRequest($addLiffAppRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\Liff\Model\AddLiffAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\Liff\Model\AddLiffAppResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\Liff\Model\AddLiffAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\Liff\Model\AddLiffAppResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\Liff\Model\AddLiffAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addLIFFAppAsync
     *
     * @param  \LINE\Clients\Liff\Model\AddLiffAppRequest $addLiffAppRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addLIFFApp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLIFFAppAsync($addLiffAppRequest, string $contentType = self::contentTypes['addLIFFApp'][0])
    {
        return $this->addLIFFAppAsyncWithHttpInfo($addLiffAppRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLIFFAppAsyncWithHttpInfo
     *
     * @param  \LINE\Clients\Liff\Model\AddLiffAppRequest $addLiffAppRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addLIFFApp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLIFFAppAsyncWithHttpInfo($addLiffAppRequest, string $contentType = self::contentTypes['addLIFFApp'][0])
    {
        $returnType = '\LINE\Clients\Liff\Model\AddLiffAppResponse';
        $request = $this->addLIFFAppRequest($addLiffAppRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLIFFApp'
     *
     * @param  \LINE\Clients\Liff\Model\AddLiffAppRequest $addLiffAppRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addLIFFApp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addLIFFAppRequest($addLiffAppRequest, string $contentType = self::contentTypes['addLIFFApp'][0])
    {

        // verify the required parameter 'addLiffAppRequest' is set
        if ($addLiffAppRequest === null || (is_array($addLiffAppRequest) && count($addLiffAppRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addLiffAppRequest when calling addLIFFApp'
            );
        }


        $resourcePath = '/liff/v1/apps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($addLiffAppRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($addLiffAppRequest));
            } else {
                $httpBody = $addLiffAppRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLIFFApp
     *
     * Delete LIFF app from a channel
     *
     * @param  string $liffId ID of the LIFF app to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLIFFApp'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Liff\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLIFFApp($liffId, string $contentType = self::contentTypes['deleteLIFFApp'][0])
    {
        $this->deleteLIFFAppWithHttpInfo($liffId, $contentType);
    }

    /**
     * Operation deleteLIFFAppWithHttpInfo
     *
     * Delete LIFF app from a channel
     *
     * @param  string $liffId ID of the LIFF app to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLIFFApp'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Liff\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLIFFAppWithHttpInfo($liffId, string $contentType = self::contentTypes['deleteLIFFApp'][0])
    {
        $request = $this->deleteLIFFAppRequest($liffId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLIFFAppAsync
     *
     * Delete LIFF app from a channel
     *
     * @param  string $liffId ID of the LIFF app to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLIFFApp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLIFFAppAsync($liffId, string $contentType = self::contentTypes['deleteLIFFApp'][0])
    {
        return $this->deleteLIFFAppAsyncWithHttpInfo($liffId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLIFFAppAsyncWithHttpInfo
     *
     * Delete LIFF app from a channel
     *
     * @param  string $liffId ID of the LIFF app to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLIFFApp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLIFFAppAsyncWithHttpInfo($liffId, string $contentType = self::contentTypes['deleteLIFFApp'][0])
    {
        $returnType = '';
        $request = $this->deleteLIFFAppRequest($liffId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLIFFApp'
     *
     * @param  string $liffId ID of the LIFF app to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLIFFApp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLIFFAppRequest($liffId, string $contentType = self::contentTypes['deleteLIFFApp'][0])
    {

        // verify the required parameter 'liffId' is set
        if ($liffId === null || (is_array($liffId) && count($liffId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $liffId when calling deleteLIFFApp'
            );
        }


        $resourcePath = '/liff/v1/apps/{liffId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liffId !== null) {
            $resourcePath = str_replace(
                '{' . 'liffId' . '}',
                ObjectSerializer::toPathValue($liffId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllLIFFApps
     *
     * Get all LIFF apps
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllLIFFApps'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Liff\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LINE\Clients\Liff\Model\GetAllLiffAppsResponse
     */
    public function getAllLIFFApps(string $contentType = self::contentTypes['getAllLIFFApps'][0])
    {
        list($response) = $this->getAllLIFFAppsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getAllLIFFAppsWithHttpInfo
     *
     * Get all LIFF apps
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllLIFFApps'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Liff\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LINE\Clients\Liff\Model\GetAllLiffAppsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllLIFFAppsWithHttpInfo(string $contentType = self::contentTypes['getAllLIFFApps'][0])
    {
        $request = $this->getAllLIFFAppsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LINE\Clients\Liff\Model\GetAllLiffAppsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LINE\Clients\Liff\Model\GetAllLiffAppsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LINE\Clients\Liff\Model\GetAllLiffAppsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LINE\Clients\Liff\Model\GetAllLiffAppsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LINE\Clients\Liff\Model\GetAllLiffAppsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllLIFFAppsAsync
     *
     * Get all LIFF apps
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllLIFFApps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllLIFFAppsAsync(string $contentType = self::contentTypes['getAllLIFFApps'][0])
    {
        return $this->getAllLIFFAppsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllLIFFAppsAsyncWithHttpInfo
     *
     * Get all LIFF apps
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllLIFFApps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllLIFFAppsAsyncWithHttpInfo(string $contentType = self::contentTypes['getAllLIFFApps'][0])
    {
        $returnType = '\LINE\Clients\Liff\Model\GetAllLiffAppsResponse';
        $request = $this->getAllLIFFAppsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllLIFFApps'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllLIFFApps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllLIFFAppsRequest(string $contentType = self::contentTypes['getAllLIFFApps'][0])
    {


        $resourcePath = '/liff/v1/apps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLIFFApp
     *
     * @param  string $liffId ID of the LIFF app to be updated (required)
     * @param  \LINE\Clients\Liff\Model\UpdateLiffAppRequest $updateLiffAppRequest updateLiffAppRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLIFFApp'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Liff\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateLIFFApp($liffId, $updateLiffAppRequest, string $contentType = self::contentTypes['updateLIFFApp'][0])
    {
        $this->updateLIFFAppWithHttpInfo($liffId, $updateLiffAppRequest, $contentType);
    }

    /**
     * Operation updateLIFFAppWithHttpInfo
     *
     * @param  string $liffId ID of the LIFF app to be updated (required)
     * @param  \LINE\Clients\Liff\Model\UpdateLiffAppRequest $updateLiffAppRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLIFFApp'] to see the possible values for this operation
     *
     * @throws \LINE\Clients\Liff\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLIFFAppWithHttpInfo($liffId, $updateLiffAppRequest, string $contentType = self::contentTypes['updateLIFFApp'][0])
    {
        $request = $this->updateLIFFAppRequest($liffId, $updateLiffAppRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateLIFFAppAsync
     *
     * @param  string $liffId ID of the LIFF app to be updated (required)
     * @param  \LINE\Clients\Liff\Model\UpdateLiffAppRequest $updateLiffAppRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLIFFApp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLIFFAppAsync($liffId, $updateLiffAppRequest, string $contentType = self::contentTypes['updateLIFFApp'][0])
    {
        return $this->updateLIFFAppAsyncWithHttpInfo($liffId, $updateLiffAppRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLIFFAppAsyncWithHttpInfo
     *
     * @param  string $liffId ID of the LIFF app to be updated (required)
     * @param  \LINE\Clients\Liff\Model\UpdateLiffAppRequest $updateLiffAppRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLIFFApp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLIFFAppAsyncWithHttpInfo($liffId, $updateLiffAppRequest, string $contentType = self::contentTypes['updateLIFFApp'][0])
    {
        $returnType = '';
        $request = $this->updateLIFFAppRequest($liffId, $updateLiffAppRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLIFFApp'
     *
     * @param  string $liffId ID of the LIFF app to be updated (required)
     * @param  \LINE\Clients\Liff\Model\UpdateLiffAppRequest $updateLiffAppRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLIFFApp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLIFFAppRequest($liffId, $updateLiffAppRequest, string $contentType = self::contentTypes['updateLIFFApp'][0])
    {

        // verify the required parameter 'liffId' is set
        if ($liffId === null || (is_array($liffId) && count($liffId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $liffId when calling updateLIFFApp'
            );
        }

        // verify the required parameter 'updateLiffAppRequest' is set
        if ($updateLiffAppRequest === null || (is_array($updateLiffAppRequest) && count($updateLiffAppRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateLiffAppRequest when calling updateLIFFApp'
            );
        }


        $resourcePath = '/liff/v1/apps/{liffId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liffId !== null) {
            $resourcePath = str_replace(
                '{' . 'liffId' . '}',
                ObjectSerializer::toPathValue($liffId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateLiffAppRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateLiffAppRequest));
            } else {
                $httpBody = $updateLiffAppRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
