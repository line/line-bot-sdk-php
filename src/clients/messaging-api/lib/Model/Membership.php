<?php
/**
 * Copyright 2024 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/**
 * Membership
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  LINE\Clients\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LINE\Clients\MessagingApi\Model;

use \ArrayAccess;
use \LINE\Clients\MessagingApi\ObjectSerializer;

/**
 * Membership Class Doc Comment
 *
 * @category Class
 * @package  LINE\Clients\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Membership implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Membership';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'membershipId' => 'int',
        'title' => 'string',
        'description' => 'string',
        'benefits' => 'string[]',
        'price' => 'float',
        'currency' => 'string',
        'memberCount' => 'int',
        'memberLimit' => 'int',
        'isInAppPurchase' => 'bool',
        'isPublished' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'membershipId' => null,
        'title' => null,
        'description' => null,
        'benefits' => null,
        'price' => 'double',
        'currency' => null,
        'memberCount' => null,
        'memberLimit' => null,
        'isInAppPurchase' => null,
        'isPublished' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'membershipId' => false,
		'title' => false,
		'description' => false,
		'benefits' => false,
		'price' => false,
		'currency' => false,
		'memberCount' => false,
		'memberLimit' => true,
		'isInAppPurchase' => false,
		'isPublished' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'membershipId' => 'membershipId',
        'title' => 'title',
        'description' => 'description',
        'benefits' => 'benefits',
        'price' => 'price',
        'currency' => 'currency',
        'memberCount' => 'memberCount',
        'memberLimit' => 'memberLimit',
        'isInAppPurchase' => 'isInAppPurchase',
        'isPublished' => 'isPublished'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'membershipId' => 'setMembershipId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'benefits' => 'setBenefits',
        'price' => 'setPrice',
        'currency' => 'setCurrency',
        'memberCount' => 'setMemberCount',
        'memberLimit' => 'setMemberLimit',
        'isInAppPurchase' => 'setIsInAppPurchase',
        'isPublished' => 'setIsPublished'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'membershipId' => 'getMembershipId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'benefits' => 'getBenefits',
        'price' => 'getPrice',
        'currency' => 'getCurrency',
        'memberCount' => 'getMemberCount',
        'memberLimit' => 'getMemberLimit',
        'isInAppPurchase' => 'getIsInAppPurchase',
        'isPublished' => 'getIsPublished'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_JPY = 'JPY';
    public const CURRENCY_TWD = 'TWD';
    public const CURRENCY_THB = 'THB';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_JPY,
            self::CURRENCY_TWD,
            self::CURRENCY_THB,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('membershipId', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('benefits', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('memberCount', $data ?? [], null);
        $this->setIfExists('memberLimit', $data ?? [], null);
        $this->setIfExists('isInAppPurchase', $data ?? [], null);
        $this->setIfExists('isPublished', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['membershipId'] === null) {
            $invalidProperties[] = "'membershipId' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['benefits'] === null) {
            $invalidProperties[] = "'benefits' can't be null";
        }
        if ((count($this->container['benefits']) < 1)) {
            $invalidProperties[] = "invalid value for 'benefits', number of items must be greater than or equal to 1.";
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['memberCount'] === null) {
            $invalidProperties[] = "'memberCount' can't be null";
        }
        if ($this->container['memberLimit'] === null) {
            $invalidProperties[] = "'memberLimit' can't be null";
        }
        if ($this->container['isInAppPurchase'] === null) {
            $invalidProperties[] = "'isInAppPurchase' can't be null";
        }
        if ($this->container['isPublished'] === null) {
            $invalidProperties[] = "'isPublished' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets membershipId
     *
     * @return int
     */
    public function getMembershipId()
    {
        return $this->container['membershipId'];
    }

    /**
     * Sets membershipId
     *
     * @param int $membershipId Membership plan ID.
     *
     * @return self
     */
    public function setMembershipId($membershipId)
    {
        if (is_null($membershipId)) {
            throw new \InvalidArgumentException('non-nullable membershipId cannot be null');
        }
        $this->container['membershipId'] = $membershipId;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Membership plan name.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Membership plan description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets benefits
     *
     * @return string[]
     */
    public function getBenefits()
    {
        return $this->container['benefits'];
    }

    /**
     * Sets benefits
     *
     * @param string[] $benefits List of membership plan perks.
     *
     * @return self
     */
    public function setBenefits($benefits)
    {
        if (is_null($benefits)) {
            throw new \InvalidArgumentException('non-nullable benefits cannot be null');
        }


        if ((count($benefits) < 1)) {
            throw new \InvalidArgumentException('invalid length for $benefits when calling Membership., number of items must be greater than or equal to 1.');
        }
        $this->container['benefits'] = $benefits;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Monthly fee for membership plan. (e.g. 1500.00)
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency of membership.price.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets memberCount
     *
     * @return int
     */
    public function getMemberCount()
    {
        return $this->container['memberCount'];
    }

    /**
     * Sets memberCount
     *
     * @param int $memberCount Number of members subscribed to the membership plan.
     *
     * @return self
     */
    public function setMemberCount($memberCount)
    {
        if (is_null($memberCount)) {
            throw new \InvalidArgumentException('non-nullable memberCount cannot be null');
        }
        $this->container['memberCount'] = $memberCount;

        return $this;
    }

    /**
     * Gets memberLimit
     *
     * @return int
     */
    public function getMemberLimit()
    {
        return $this->container['memberLimit'];
    }

    /**
     * Sets memberLimit
     *
     * @param int $memberLimit The upper limit of members who can subscribe. If no upper limit is set, it will be null.
     *
     * @return self
     */
    public function setMemberLimit($memberLimit)
    {
        if (is_null($memberLimit)) {
            array_push($this->openAPINullablesSetToNull, 'memberLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('memberLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['memberLimit'] = $memberLimit;

        return $this;
    }

    /**
     * Gets isInAppPurchase
     *
     * @return bool
     */
    public function getIsInAppPurchase()
    {
        return $this->container['isInAppPurchase'];
    }

    /**
     * Sets isInAppPurchase
     *
     * @param bool $isInAppPurchase Payment method for users who subscribe to a membership plan.
     *
     * @return self
     */
    public function setIsInAppPurchase($isInAppPurchase)
    {
        if (is_null($isInAppPurchase)) {
            throw new \InvalidArgumentException('non-nullable isInAppPurchase cannot be null');
        }
        $this->container['isInAppPurchase'] = $isInAppPurchase;

        return $this;
    }

    /**
     * Gets isPublished
     *
     * @return bool
     */
    public function getIsPublished()
    {
        return $this->container['isPublished'];
    }

    /**
     * Sets isPublished
     *
     * @param bool $isPublished Membership plan status.
     *
     * @return self
     */
    public function setIsPublished($isPublished)
    {
        if (is_null($isPublished)) {
            throw new \InvalidArgumentException('non-nullable isPublished cannot be null');
        }
        $this->container['isPublished'] = $isPublished;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


