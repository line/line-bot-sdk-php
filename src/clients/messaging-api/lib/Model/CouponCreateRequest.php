<?php
/**
 * Copyright 2025 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/**
 * CouponCreateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  LINE\Clients\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LINE\Clients\MessagingApi\Model;

use \ArrayAccess;
use \LINE\Clients\MessagingApi\ObjectSerializer;

/**
 * CouponCreateRequest Class Doc Comment
 *
 * @category Class
 * @description Request object for creating a coupon. Contains all configurable coupon properties.
 * @package  LINE\Clients\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CouponCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CouponCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acquisitionCondition' => '\LINE\Clients\MessagingApi\Model\AcquisitionConditionRequest',
        'barcodeImageUrl' => 'string',
        'couponCode' => 'string',
        'description' => 'string',
        'endTimestamp' => 'int',
        'imageUrl' => 'string',
        'maxUseCountPerTicket' => 'int',
        'startTimestamp' => 'int',
        'title' => 'string',
        'usageCondition' => 'string',
        'reward' => '\LINE\Clients\MessagingApi\Model\CouponRewardRequest',
        'visibility' => 'string',
        'timezone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acquisitionCondition' => null,
        'barcodeImageUrl' => null,
        'couponCode' => null,
        'description' => null,
        'endTimestamp' => 'int64',
        'imageUrl' => null,
        'maxUseCountPerTicket' => 'int32',
        'startTimestamp' => 'int64',
        'title' => null,
        'usageCondition' => null,
        'reward' => null,
        'visibility' => null,
        'timezone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'acquisitionCondition' => false,
        'barcodeImageUrl' => false,
        'couponCode' => false,
        'description' => false,
        'endTimestamp' => false,
        'imageUrl' => false,
        'maxUseCountPerTicket' => false,
        'startTimestamp' => false,
        'title' => false,
        'usageCondition' => false,
        'reward' => false,
        'visibility' => false,
        'timezone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acquisitionCondition' => 'acquisitionCondition',
        'barcodeImageUrl' => 'barcodeImageUrl',
        'couponCode' => 'couponCode',
        'description' => 'description',
        'endTimestamp' => 'endTimestamp',
        'imageUrl' => 'imageUrl',
        'maxUseCountPerTicket' => 'maxUseCountPerTicket',
        'startTimestamp' => 'startTimestamp',
        'title' => 'title',
        'usageCondition' => 'usageCondition',
        'reward' => 'reward',
        'visibility' => 'visibility',
        'timezone' => 'timezone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acquisitionCondition' => 'setAcquisitionCondition',
        'barcodeImageUrl' => 'setBarcodeImageUrl',
        'couponCode' => 'setCouponCode',
        'description' => 'setDescription',
        'endTimestamp' => 'setEndTimestamp',
        'imageUrl' => 'setImageUrl',
        'maxUseCountPerTicket' => 'setMaxUseCountPerTicket',
        'startTimestamp' => 'setStartTimestamp',
        'title' => 'setTitle',
        'usageCondition' => 'setUsageCondition',
        'reward' => 'setReward',
        'visibility' => 'setVisibility',
        'timezone' => 'setTimezone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acquisitionCondition' => 'getAcquisitionCondition',
        'barcodeImageUrl' => 'getBarcodeImageUrl',
        'couponCode' => 'getCouponCode',
        'description' => 'getDescription',
        'endTimestamp' => 'getEndTimestamp',
        'imageUrl' => 'getImageUrl',
        'maxUseCountPerTicket' => 'getMaxUseCountPerTicket',
        'startTimestamp' => 'getStartTimestamp',
        'title' => 'getTitle',
        'usageCondition' => 'getUsageCondition',
        'reward' => 'getReward',
        'visibility' => 'getVisibility',
        'timezone' => 'getTimezone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VISIBILITY_UNLISTED = 'UNLISTED';
    public const VISIBILITY__PUBLIC = 'PUBLIC';
    public const TIMEZONE_ETC_GMT_MINUS_12 = 'ETC_GMT_MINUS_12';
    public const TIMEZONE_ETC_GMT_MINUS_11 = 'ETC_GMT_MINUS_11';
    public const TIMEZONE_PACIFIC_HONOLULU = 'PACIFIC_HONOLULU';
    public const TIMEZONE_AMERICA_ANCHORAGE = 'AMERICA_ANCHORAGE';
    public const TIMEZONE_AMERICA_LOS_ANGELES = 'AMERICA_LOS_ANGELES';
    public const TIMEZONE_AMERICA_PHOENIX = 'AMERICA_PHOENIX';
    public const TIMEZONE_AMERICA_CHICAGO = 'AMERICA_CHICAGO';
    public const TIMEZONE_AMERICA_NEW_YORK = 'AMERICA_NEW_YORK';
    public const TIMEZONE_AMERICA_CARACAS = 'AMERICA_CARACAS';
    public const TIMEZONE_AMERICA_SANTIAGO = 'AMERICA_SANTIAGO';
    public const TIMEZONE_AMERICA_ST_JOHNS = 'AMERICA_ST_JOHNS';
    public const TIMEZONE_AMERICA_SAO_PAULO = 'AMERICA_SAO_PAULO';
    public const TIMEZONE_ETC_GMT_MINUS_2 = 'ETC_GMT_MINUS_2';
    public const TIMEZONE_ATLANTIC_CAPE_VERDE = 'ATLANTIC_CAPE_VERDE';
    public const TIMEZONE_EUROPE_LONDON = 'EUROPE_LONDON';
    public const TIMEZONE_EUROPE_PARIS = 'EUROPE_PARIS';
    public const TIMEZONE_EUROPE_ISTANBUL = 'EUROPE_ISTANBUL';
    public const TIMEZONE_EUROPE_MOSCOW = 'EUROPE_MOSCOW';
    public const TIMEZONE_ASIA_TEHRAN = 'ASIA_TEHRAN';
    public const TIMEZONE_ASIA_TBILISI = 'ASIA_TBILISI';
    public const TIMEZONE_ASIA_KABUL = 'ASIA_KABUL';
    public const TIMEZONE_ASIA_TASHKENT = 'ASIA_TASHKENT';
    public const TIMEZONE_ASIA_COLOMBO = 'ASIA_COLOMBO';
    public const TIMEZONE_ASIA_KATHMANDU = 'ASIA_KATHMANDU';
    public const TIMEZONE_ASIA_ALMATY = 'ASIA_ALMATY';
    public const TIMEZONE_ASIA_RANGOON = 'ASIA_RANGOON';
    public const TIMEZONE_ASIA_BANGKOK = 'ASIA_BANGKOK';
    public const TIMEZONE_ASIA_TAIPEI = 'ASIA_TAIPEI';
    public const TIMEZONE_ASIA_TOKYO = 'ASIA_TOKYO';
    public const TIMEZONE_AUSTRALIA_DARWIN = 'AUSTRALIA_DARWIN';
    public const TIMEZONE_AUSTRALIA_SYDNEY = 'AUSTRALIA_SYDNEY';
    public const TIMEZONE_ASIA_VLADIVOSTOK = 'ASIA_VLADIVOSTOK';
    public const TIMEZONE_ETC_GMT_PLUS_12 = 'ETC_GMT_PLUS_12';
    public const TIMEZONE_PACIFIC_TONGATAPU = 'PACIFIC_TONGATAPU';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVisibilityAllowableValues()
    {
        return [
            self::VISIBILITY_UNLISTED,
            self::VISIBILITY__PUBLIC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimezoneAllowableValues()
    {
        return [
            self::TIMEZONE_ETC_GMT_MINUS_12,
            self::TIMEZONE_ETC_GMT_MINUS_11,
            self::TIMEZONE_PACIFIC_HONOLULU,
            self::TIMEZONE_AMERICA_ANCHORAGE,
            self::TIMEZONE_AMERICA_LOS_ANGELES,
            self::TIMEZONE_AMERICA_PHOENIX,
            self::TIMEZONE_AMERICA_CHICAGO,
            self::TIMEZONE_AMERICA_NEW_YORK,
            self::TIMEZONE_AMERICA_CARACAS,
            self::TIMEZONE_AMERICA_SANTIAGO,
            self::TIMEZONE_AMERICA_ST_JOHNS,
            self::TIMEZONE_AMERICA_SAO_PAULO,
            self::TIMEZONE_ETC_GMT_MINUS_2,
            self::TIMEZONE_ATLANTIC_CAPE_VERDE,
            self::TIMEZONE_EUROPE_LONDON,
            self::TIMEZONE_EUROPE_PARIS,
            self::TIMEZONE_EUROPE_ISTANBUL,
            self::TIMEZONE_EUROPE_MOSCOW,
            self::TIMEZONE_ASIA_TEHRAN,
            self::TIMEZONE_ASIA_TBILISI,
            self::TIMEZONE_ASIA_KABUL,
            self::TIMEZONE_ASIA_TASHKENT,
            self::TIMEZONE_ASIA_COLOMBO,
            self::TIMEZONE_ASIA_KATHMANDU,
            self::TIMEZONE_ASIA_ALMATY,
            self::TIMEZONE_ASIA_RANGOON,
            self::TIMEZONE_ASIA_BANGKOK,
            self::TIMEZONE_ASIA_TAIPEI,
            self::TIMEZONE_ASIA_TOKYO,
            self::TIMEZONE_AUSTRALIA_DARWIN,
            self::TIMEZONE_AUSTRALIA_SYDNEY,
            self::TIMEZONE_ASIA_VLADIVOSTOK,
            self::TIMEZONE_ETC_GMT_PLUS_12,
            self::TIMEZONE_PACIFIC_TONGATAPU,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('acquisitionCondition', $data ?? [], null);
        $this->setIfExists('barcodeImageUrl', $data ?? [], null);
        $this->setIfExists('couponCode', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('endTimestamp', $data ?? [], null);
        $this->setIfExists('imageUrl', $data ?? [], null);
        $this->setIfExists('maxUseCountPerTicket', $data ?? [], null);
        $this->setIfExists('startTimestamp', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('usageCondition', $data ?? [], null);
        $this->setIfExists('reward', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['acquisitionCondition'] === null) {
            $invalidProperties[] = "'acquisitionCondition' can't be null";
        }
        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 1000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['endTimestamp'] === null) {
            $invalidProperties[] = "'endTimestamp' can't be null";
        }
        if ($this->container['maxUseCountPerTicket'] === null) {
            $invalidProperties[] = "'maxUseCountPerTicket' can't be null";
        }
        if (($this->container['maxUseCountPerTicket'] > 1)) {
            $invalidProperties[] = "invalid value for 'maxUseCountPerTicket', must be smaller than or equal to 1.";
        }

        if ($this->container['startTimestamp'] === null) {
            $invalidProperties[] = "'startTimestamp' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 60)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['usageCondition']) && (mb_strlen($this->container['usageCondition']) > 100)) {
            $invalidProperties[] = "invalid value for 'usageCondition', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['usageCondition']) && (mb_strlen($this->container['usageCondition']) < 0)) {
            $invalidProperties[] = "invalid value for 'usageCondition', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['visibility'] === null) {
            $invalidProperties[] = "'visibility' can't be null";
        }
        $allowedValues = $this->getVisibilityAllowableValues();
        if (!is_null($this->container['visibility']) && !in_array($this->container['visibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'visibility', must be one of '%s'",
                $this->container['visibility'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        $allowedValues = $this->getTimezoneAllowableValues();
        if (!is_null($this->container['timezone']) && !in_array($this->container['timezone'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timezone', must be one of '%s'",
                $this->container['timezone'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acquisitionCondition
     *
     * @return \LINE\Clients\MessagingApi\Model\AcquisitionConditionRequest
     */
    public function getAcquisitionCondition()
    {
        return $this->container['acquisitionCondition'];
    }

    /**
     * Sets acquisitionCondition
     *
     * @param \LINE\Clients\MessagingApi\Model\AcquisitionConditionRequest $acquisitionCondition acquisitionCondition
     *
     * @return self
     */
    public function setAcquisitionCondition($acquisitionCondition)
    {
        if (is_null($acquisitionCondition)) {
            throw new \InvalidArgumentException('non-nullable acquisitionCondition cannot be null');
        }
        $this->container['acquisitionCondition'] = $acquisitionCondition;

        return $this;
    }

    /**
     * Gets barcodeImageUrl
     *
     * @return string|null
     */
    public function getBarcodeImageUrl()
    {
        return $this->container['barcodeImageUrl'];
    }

    /**
     * Sets barcodeImageUrl
     *
     * @param string|null $barcodeImageUrl URL of the barcode image associated with the coupon. Used for in-store redemption.
     *
     * @return self
     */
    public function setBarcodeImageUrl($barcodeImageUrl)
    {
        if (is_null($barcodeImageUrl)) {
            throw new \InvalidArgumentException('non-nullable barcodeImageUrl cannot be null');
        }
        $this->container['barcodeImageUrl'] = $barcodeImageUrl;

        return $this;
    }

    /**
     * Gets couponCode
     *
     * @return string|null
     */
    public function getCouponCode()
    {
        return $this->container['couponCode'];
    }

    /**
     * Sets couponCode
     *
     * @param string|null $couponCode Unique code to be presented by the user to redeem the coupon. Optional.
     *
     * @return self
     */
    public function setCouponCode($couponCode)
    {
        if (is_null($couponCode)) {
            throw new \InvalidArgumentException('non-nullable couponCode cannot be null');
        }
        $this->container['couponCode'] = $couponCode;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Detailed description of the coupon. Displayed to users.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CouponCreateRequest., must be smaller than or equal to 1000.');
        }
        if ((mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CouponCreateRequest., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets endTimestamp
     *
     * @return int
     */
    public function getEndTimestamp()
    {
        return $this->container['endTimestamp'];
    }

    /**
     * Sets endTimestamp
     *
     * @param int $endTimestamp Coupon expiration time (epoch seconds). Coupon cannot be used after this time.
     *
     * @return self
     */
    public function setEndTimestamp($endTimestamp)
    {
        if (is_null($endTimestamp)) {
            throw new \InvalidArgumentException('non-nullable endTimestamp cannot be null');
        }
        $this->container['endTimestamp'] = $endTimestamp;

        return $this;
    }

    /**
     * Gets imageUrl
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['imageUrl'];
    }

    /**
     * Sets imageUrl
     *
     * @param string|null $imageUrl URL of the main image representing the coupon. Displayed in the coupon list.
     *
     * @return self
     */
    public function setImageUrl($imageUrl)
    {
        if (is_null($imageUrl)) {
            throw new \InvalidArgumentException('non-nullable imageUrl cannot be null');
        }
        $this->container['imageUrl'] = $imageUrl;

        return $this;
    }

    /**
     * Gets maxUseCountPerTicket
     *
     * @return int
     */
    public function getMaxUseCountPerTicket()
    {
        return $this->container['maxUseCountPerTicket'];
    }

    /**
     * Sets maxUseCountPerTicket
     *
     * @param int $maxUseCountPerTicket Maximum number of times a single coupon ticket can be used. Use -1 to indicate no limit.
     *
     * @return self
     */
    public function setMaxUseCountPerTicket($maxUseCountPerTicket)
    {
        if (is_null($maxUseCountPerTicket)) {
            throw new \InvalidArgumentException('non-nullable maxUseCountPerTicket cannot be null');
        }

        if (($maxUseCountPerTicket > 1)) {
            throw new \InvalidArgumentException('invalid value for $maxUseCountPerTicket when calling CouponCreateRequest., must be smaller than or equal to 1.');
        }

        $this->container['maxUseCountPerTicket'] = $maxUseCountPerTicket;

        return $this;
    }

    /**
     * Gets startTimestamp
     *
     * @return int
     */
    public function getStartTimestamp()
    {
        return $this->container['startTimestamp'];
    }

    /**
     * Sets startTimestamp
     *
     * @param int $startTimestamp Coupon start time (epoch seconds). Coupon can be used from this time.
     *
     * @return self
     */
    public function setStartTimestamp($startTimestamp)
    {
        if (is_null($startTimestamp)) {
            throw new \InvalidArgumentException('non-nullable startTimestamp cannot be null');
        }
        $this->container['startTimestamp'] = $startTimestamp;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the coupon. Displayed in the coupon list.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        if ((mb_strlen($title) > 60)) {
            throw new \InvalidArgumentException('invalid length for $title when calling CouponCreateRequest., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $title when calling CouponCreateRequest., must be bigger than or equal to 1.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets usageCondition
     *
     * @return string|null
     */
    public function getUsageCondition()
    {
        return $this->container['usageCondition'];
    }

    /**
     * Sets usageCondition
     *
     * @param string|null $usageCondition Conditions for using the coupon. Shown to users.
     *
     * @return self
     */
    public function setUsageCondition($usageCondition)
    {
        if (is_null($usageCondition)) {
            throw new \InvalidArgumentException('non-nullable usageCondition cannot be null');
        }
        if ((mb_strlen($usageCondition) > 100)) {
            throw new \InvalidArgumentException('invalid length for $usageCondition when calling CouponCreateRequest., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($usageCondition) < 0)) {
            throw new \InvalidArgumentException('invalid length for $usageCondition when calling CouponCreateRequest., must be bigger than or equal to 0.');
        }

        $this->container['usageCondition'] = $usageCondition;

        return $this;
    }

    /**
     * Gets reward
     *
     * @return \LINE\Clients\MessagingApi\Model\CouponRewardRequest|null
     */
    public function getReward()
    {
        return $this->container['reward'];
    }

    /**
     * Sets reward
     *
     * @param \LINE\Clients\MessagingApi\Model\CouponRewardRequest|null $reward reward
     *
     * @return self
     */
    public function setReward($reward)
    {
        if (is_null($reward)) {
            throw new \InvalidArgumentException('non-nullable reward cannot be null');
        }
        $this->container['reward'] = $reward;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string $visibility Visibility of the coupon. Determines who can see or acquire the coupon.
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        if (is_null($visibility)) {
            throw new \InvalidArgumentException('non-nullable visibility cannot be null');
        }
        $allowedValues = $this->getVisibilityAllowableValues();
        if (!in_array($visibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'visibility', must be one of '%s'",
                    $visibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Timezone for interpreting start and end timestamps.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $allowedValues = $this->getTimezoneAllowableValues();
        if (!in_array($timezone, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timezone', must be one of '%s'",
                    $timezone,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Create an instance of CouponCreateRequest from a dict (associative array)
     *
     * @internal This method is intended to be used internally only for now.
     *
     * @param array|null $data Associative array of property values
     * @return CouponCreateRequest
     */
    public static function fromAssocArray(?array $data): self
    {
        if ($data === null) {
            return new static();
        }

        $instance = new static();

        if (isset($data['acquisitionCondition'])) {
            $instance->setacquisitionCondition(\LINE\Clients\MessagingApi\Model\AcquisitionConditionRequest::fromAssocArray($data['acquisitionCondition']));
        }
        if (isset($data['barcodeImageUrl'])) {
            $instance->setbarcodeImageUrl($data['barcodeImageUrl']);
        }
        if (isset($data['couponCode'])) {
            $instance->setcouponCode($data['couponCode']);
        }
        if (isset($data['description'])) {
            $instance->setdescription($data['description']);
        }
        if (isset($data['endTimestamp'])) {
            $instance->setendTimestamp($data['endTimestamp']);
        }
        if (isset($data['imageUrl'])) {
            $instance->setimageUrl($data['imageUrl']);
        }
        if (isset($data['maxUseCountPerTicket'])) {
            $instance->setmaxUseCountPerTicket($data['maxUseCountPerTicket']);
        }
        if (isset($data['startTimestamp'])) {
            $instance->setstartTimestamp($data['startTimestamp']);
        }
        if (isset($data['title'])) {
            $instance->settitle($data['title']);
        }
        if (isset($data['usageCondition'])) {
            $instance->setusageCondition($data['usageCondition']);
        }
        if (isset($data['reward'])) {
            $instance->setreward(\LINE\Clients\MessagingApi\Model\CouponRewardRequest::fromAssocArray($data['reward']));
        }
        if (isset($data['visibility'])) {
            $instance->setvisibility($data['visibility']);
        }
        if (isset($data['timezone'])) {
            $instance->settimezone($data['timezone']);
        }

        return $instance;
    }
}


