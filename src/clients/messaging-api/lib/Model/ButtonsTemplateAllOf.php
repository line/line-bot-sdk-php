<?php
/**
 * Copyright 2024 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/**
 * ButtonsTemplateAllOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  LINE\Clients\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LINE\Clients\MessagingApi\Model;

use \ArrayAccess;
use \LINE\Clients\MessagingApi\ObjectSerializer;

/**
 * ButtonsTemplateAllOf Class Doc Comment
 *
 * @category Class
 * @package  LINE\Clients\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ButtonsTemplateAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ButtonsTemplate_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'thumbnailImageUrl' => 'string',
        'imageAspectRatio' => 'string',
        'imageSize' => 'string',
        'imageBackgroundColor' => 'string',
        'title' => 'string',
        'text' => 'string',
        'defaultAction' => '\LINE\Clients\MessagingApi\Model\Action',
        'actions' => '\LINE\Clients\MessagingApi\Model\Action[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'thumbnailImageUrl' => 'uri',
        'imageAspectRatio' => null,
        'imageSize' => null,
        'imageBackgroundColor' => null,
        'title' => null,
        'text' => null,
        'defaultAction' => null,
        'actions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'thumbnailImageUrl' => false,
		'imageAspectRatio' => false,
		'imageSize' => false,
		'imageBackgroundColor' => false,
		'title' => false,
		'text' => false,
		'defaultAction' => false,
		'actions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'thumbnailImageUrl' => 'thumbnailImageUrl',
        'imageAspectRatio' => 'imageAspectRatio',
        'imageSize' => 'imageSize',
        'imageBackgroundColor' => 'imageBackgroundColor',
        'title' => 'title',
        'text' => 'text',
        'defaultAction' => 'defaultAction',
        'actions' => 'actions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'thumbnailImageUrl' => 'setThumbnailImageUrl',
        'imageAspectRatio' => 'setImageAspectRatio',
        'imageSize' => 'setImageSize',
        'imageBackgroundColor' => 'setImageBackgroundColor',
        'title' => 'setTitle',
        'text' => 'setText',
        'defaultAction' => 'setDefaultAction',
        'actions' => 'setActions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'thumbnailImageUrl' => 'getThumbnailImageUrl',
        'imageAspectRatio' => 'getImageAspectRatio',
        'imageSize' => 'getImageSize',
        'imageBackgroundColor' => 'getImageBackgroundColor',
        'title' => 'getTitle',
        'text' => 'getText',
        'defaultAction' => 'getDefaultAction',
        'actions' => 'getActions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('thumbnailImageUrl', $data ?? [], null);
        $this->setIfExists('imageAspectRatio', $data ?? [], null);
        $this->setIfExists('imageSize', $data ?? [], null);
        $this->setIfExists('imageBackgroundColor', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('defaultAction', $data ?? [], null);
        $this->setIfExists('actions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets thumbnailImageUrl
     *
     * @return string|null
     */
    public function getThumbnailImageUrl()
    {
        return $this->container['thumbnailImageUrl'];
    }

    /**
     * Sets thumbnailImageUrl
     *
     * @param string|null $thumbnailImageUrl thumbnailImageUrl
     *
     * @return self
     */
    public function setThumbnailImageUrl($thumbnailImageUrl)
    {
        if (is_null($thumbnailImageUrl)) {
            throw new \InvalidArgumentException('non-nullable thumbnailImageUrl cannot be null');
        }
        $this->container['thumbnailImageUrl'] = $thumbnailImageUrl;

        return $this;
    }

    /**
     * Gets imageAspectRatio
     *
     * @return string|null
     */
    public function getImageAspectRatio()
    {
        return $this->container['imageAspectRatio'];
    }

    /**
     * Sets imageAspectRatio
     *
     * @param string|null $imageAspectRatio imageAspectRatio
     *
     * @return self
     */
    public function setImageAspectRatio($imageAspectRatio)
    {
        if (is_null($imageAspectRatio)) {
            throw new \InvalidArgumentException('non-nullable imageAspectRatio cannot be null');
        }
        $this->container['imageAspectRatio'] = $imageAspectRatio;

        return $this;
    }

    /**
     * Gets imageSize
     *
     * @return string|null
     */
    public function getImageSize()
    {
        return $this->container['imageSize'];
    }

    /**
     * Sets imageSize
     *
     * @param string|null $imageSize imageSize
     *
     * @return self
     */
    public function setImageSize($imageSize)
    {
        if (is_null($imageSize)) {
            throw new \InvalidArgumentException('non-nullable imageSize cannot be null');
        }
        $this->container['imageSize'] = $imageSize;

        return $this;
    }

    /**
     * Gets imageBackgroundColor
     *
     * @return string|null
     */
    public function getImageBackgroundColor()
    {
        return $this->container['imageBackgroundColor'];
    }

    /**
     * Sets imageBackgroundColor
     *
     * @param string|null $imageBackgroundColor imageBackgroundColor
     *
     * @return self
     */
    public function setImageBackgroundColor($imageBackgroundColor)
    {
        if (is_null($imageBackgroundColor)) {
            throw new \InvalidArgumentException('non-nullable imageBackgroundColor cannot be null');
        }
        $this->container['imageBackgroundColor'] = $imageBackgroundColor;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets defaultAction
     *
     * @return \LINE\Clients\MessagingApi\Model\Action|null
     */
    public function getDefaultAction()
    {
        return $this->container['defaultAction'];
    }

    /**
     * Sets defaultAction
     *
     * @param \LINE\Clients\MessagingApi\Model\Action|null $defaultAction defaultAction
     *
     * @return self
     */
    public function setDefaultAction($defaultAction)
    {
        if (is_null($defaultAction)) {
            throw new \InvalidArgumentException('non-nullable defaultAction cannot be null');
        }
        $this->container['defaultAction'] = $defaultAction;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return \LINE\Clients\MessagingApi\Model\Action[]|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param \LINE\Clients\MessagingApi\Model\Action[]|null $actions actions
     *
     * @return self
     */
    public function setActions($actions)
    {
        if (is_null($actions)) {
            throw new \InvalidArgumentException('non-nullable actions cannot be null');
        }
        $this->container['actions'] = $actions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


