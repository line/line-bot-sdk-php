<?php
/**
 * Copyright 2024 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/**
 * RichMenuResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  LINE\Clients\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LINE\Clients\MessagingApi\Model;

use \ArrayAccess;
use \LINE\Clients\MessagingApi\ObjectSerializer;

/**
 * RichMenuResponse Class Doc Comment
 *
 * @category Class
 * @package  LINE\Clients\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RichMenuResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RichMenuResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'richMenuId' => 'string',
        'size' => '\LINE\Clients\MessagingApi\Model\RichMenuSize',
        'selected' => 'bool',
        'name' => 'string',
        'chatBarText' => 'string',
        'areas' => '\LINE\Clients\MessagingApi\Model\RichMenuArea[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'richMenuId' => null,
        'size' => null,
        'selected' => null,
        'name' => null,
        'chatBarText' => null,
        'areas' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'richMenuId' => false,
		'size' => false,
		'selected' => false,
		'name' => false,
		'chatBarText' => false,
		'areas' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'richMenuId' => 'richMenuId',
        'size' => 'size',
        'selected' => 'selected',
        'name' => 'name',
        'chatBarText' => 'chatBarText',
        'areas' => 'areas'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'richMenuId' => 'setRichMenuId',
        'size' => 'setSize',
        'selected' => 'setSelected',
        'name' => 'setName',
        'chatBarText' => 'setChatBarText',
        'areas' => 'setAreas'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'richMenuId' => 'getRichMenuId',
        'size' => 'getSize',
        'selected' => 'getSelected',
        'name' => 'getName',
        'chatBarText' => 'getChatBarText',
        'areas' => 'getAreas'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('richMenuId', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('selected', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('chatBarText', $data ?? [], null);
        $this->setIfExists('areas', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['richMenuId'] === null) {
            $invalidProperties[] = "'richMenuId' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['selected'] === null) {
            $invalidProperties[] = "'selected' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 300)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 300.";
        }

        if ($this->container['chatBarText'] === null) {
            $invalidProperties[] = "'chatBarText' can't be null";
        }
        if ((mb_strlen($this->container['chatBarText']) > 14)) {
            $invalidProperties[] = "invalid value for 'chatBarText', the character length must be smaller than or equal to 14.";
        }

        if ($this->container['areas'] === null) {
            $invalidProperties[] = "'areas' can't be null";
        }
        if ((count($this->container['areas']) > 20)) {
            $invalidProperties[] = "invalid value for 'areas', number of items must be less than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets richMenuId
     *
     * @return string
     */
    public function getRichMenuId()
    {
        return $this->container['richMenuId'];
    }

    /**
     * Sets richMenuId
     *
     * @param string $richMenuId ID of a rich menu
     *
     * @return self
     */
    public function setRichMenuId($richMenuId)
    {
        if (is_null($richMenuId)) {
            throw new \InvalidArgumentException('non-nullable richMenuId cannot be null');
        }
        $this->container['richMenuId'] = $richMenuId;

        return $this;
    }

    /**
     * Gets size
     *
     * @return \LINE\Clients\MessagingApi\Model\RichMenuSize
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \LINE\Clients\MessagingApi\Model\RichMenuSize $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets selected
     *
     * @return bool
     */
    public function getSelected()
    {
        return $this->container['selected'];
    }

    /**
     * Sets selected
     *
     * @param bool $selected `true` to display the rich menu by default. Otherwise, `false`.
     *
     * @return self
     */
    public function setSelected($selected)
    {
        if (is_null($selected)) {
            throw new \InvalidArgumentException('non-nullable selected cannot be null');
        }
        $this->container['selected'] = $selected;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the rich menu. This value can be used to help manage your rich menus and is not displayed to users.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 300)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RichMenuResponse., must be smaller than or equal to 300.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets chatBarText
     *
     * @return string
     */
    public function getChatBarText()
    {
        return $this->container['chatBarText'];
    }

    /**
     * Sets chatBarText
     *
     * @param string $chatBarText Text displayed in the chat bar
     *
     * @return self
     */
    public function setChatBarText($chatBarText)
    {
        if (is_null($chatBarText)) {
            throw new \InvalidArgumentException('non-nullable chatBarText cannot be null');
        }
        if ((mb_strlen($chatBarText) > 14)) {
            throw new \InvalidArgumentException('invalid length for $chatBarText when calling RichMenuResponse., must be smaller than or equal to 14.');
        }

        $this->container['chatBarText'] = $chatBarText;

        return $this;
    }

    /**
     * Gets areas
     *
     * @return \LINE\Clients\MessagingApi\Model\RichMenuArea[]
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     *
     * @param \LINE\Clients\MessagingApi\Model\RichMenuArea[] $areas Array of area objects which define the coordinates and size of tappable areas
     *
     * @return self
     */
    public function setAreas($areas)
    {
        if (is_null($areas)) {
            throw new \InvalidArgumentException('non-nullable areas cannot be null');
        }

        if ((count($areas) > 20)) {
            throw new \InvalidArgumentException('invalid value for $areas when calling RichMenuResponse., number of items must be less than or equal to 20.');
        }
        $this->container['areas'] = $areas;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


